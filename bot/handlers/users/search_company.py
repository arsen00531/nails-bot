from aiogram import types, Dispatcher
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from aiogram import F
from aiogram.fsm.context import FSMContext
from bot.states import FindCompanyStates
from bot.services import yclients
from sqlalchemy import select, insert
from bot import models
from bot import config
from fuzzywuzzy import process, fuzz
import re
import math
import requests

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –ó–µ–º–ª–∏ (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞)
def haversine(lat1, lon1, lat2, lon2):
    R = 6371.0  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö

    dlat = math.radians(lat2 - lat1)
    dlon = math.radians(lon2 - lon1)

    a = math.sin(dlat / 2)**2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon / 2)**2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))

    distance = R * c
    return distance

def find_two_nearest_stations(user_lat, user_lon, companies):
    # –°—á–∏—Ç–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π
    stations_with_distance = []
    for company in companies:
        station_lat = company["coordinate_lat"]
        station_lon = company["coordinate_lon"]
        distance = haversine(user_lat, user_lon, station_lat, station_lon)
        stations_with_distance.append((company, distance))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é (–æ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –∫ –¥–∞–ª—å–Ω–∏–º)
    stations_with_distance.sort(key=lambda x: x[1])

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–≤–µ –±–ª–∏–∂–∞–π—à–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
    return stations_with_distance[:2]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ Yandex Geocoder API –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
def get_coordinates(address, api_key):
    url = f"https://geocode-maps.yandex.ru/1.x/?apikey={api_key}&geocode={address}&format=json"
    response = requests.get(url)
    
    if response.status_code == 200:
        json_data = response.json()
        pos = json_data['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']['Point']['pos']
        name = json_data['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']['name'].split(' ')[1]
        lon, lat = map(float, pos.split())
        return lat, lon, name
    else:
        raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Yandex Geocoder API")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ –∏–∑ —Å–ø–∏—Å–∫–∞ stations
def get_stations_coordinates(stations, api_key):
    stations_with_coordinates = []

    for station in stations:
        try:
            lat, lon = get_coordinates(station["title"], api_key)  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ç–∞–Ω—Ü–∏–∏
            station["lat"] = lat
            station["lon"] = lon
            stations_with_coordinates.append(station)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ {station['title']}: {e}")

    return stations_with_coordinates

async def search_company_handler(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardBuilder()
    btn = InlineKeyboardButton(
        text="–í—ã—Ö–æ–¥",
        callback_data="back_to_main"
    )
    keyboard.row(btn)

    await message.answer(
        text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ</b>\n"
             "<i>(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–µ–Ω–¥–µ–ª–µ–µ–≤—Å–∫–∞—è)</i>\n\n"
             "–ò–ª–∏ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã</b> —Å—Ç—É–¥–∏–∏\n"
             "<i>(–Ω–∞–ø—Ä–∏–º–µ—Ä: –¢–≤–µ—Ä—Å–∫–∞—è-–Ø–º—Å–∫–∞—è)</i>",
        reply_markup=keyboard.as_markup()
    )
    await state.set_state(FindCompanyStates.get_data)


async def get_data_handler(message: types.Message, state: FSMContext, session):
    await state.clear()
    response = await yclients.get_companies()
    companies = response["data"]

    company_titles = [i["title"].split('City Nails ')[1] for i in companies if len(i["title"].split('City Nails ')) == 2]
    company_addresses = [i["address"] for i in companies]

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—Ç—É–¥–∏—é –ø–æ –Ω–µ—á—ë—Ç–∫–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ –∞–¥—Ä–µ—Å–æ–º
    title_match = process.extractOne(message.text, company_titles, scorer=fuzz.token_sort_ratio)
    address_match = process.extractOne(message.text, company_addresses, scorer=fuzz.token_sort_ratio)

    print(title_match, address_match, address_match[1])

    if title_match and title_match[1] >= 75:
        company = next(i for i in companies if i["title"].split('City Nails ')[1] == title_match[0] if len(i["title"].split('City Nails ')) == 2)
    elif address_match and address_match[1] >= 75:
        company = next(i for i in companies if i["address"] == address_match[0])
    else:
        async with session() as open_session:
            stations = await open_session.execute(select(models.sql.Station))
            stations: list[models.sql.Station] = stations.scalars().all()

        station_titles = [station.title for station in stations]

        title_match = process.extractOne(message.text, station_titles, scorer=fuzz.token_sort_ratio)

        nearest_companies = []
        
        if title_match and title_match[1] >= 75:
            for station in stations:
                if station.title == title_match[0]:
                    user_lat, user_lon = station.coordinate_lat, station.coordinate_lon
                    nearest_companies = find_two_nearest_stations(float(user_lat), float(user_lon), companies)
        else:
            user_lat, user_lon, name = get_coordinates(message.text, config.YANDEX_GEOKODER_API)
            nearest_companies = find_two_nearest_stations(user_lat, user_lon, companies)
            st = models.sql.Station()
            st.coordinate_lat = str(user_lat)
            st.coordinate_lon = str(user_lon)
            st.title = name
            async with session() as open_session:
                open_session.add(st)
                await open_session.commit()
        for i in range(len(nearest_companies)):
            print(f"–ë–ª–∏–∂–∞–π—à–∞—è —Å—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ: {nearest_companies[i][0]['title']}")

        keyboard = InlineKeyboardBuilder()
        for company in nearest_companies:
            company_title = company[0]["title"]
            company_id = company[0]["id"]
            
            btn = InlineKeyboardButton(
                text=f"{company_title}",
                callback_data=f"near_company_{company_id}"
            )
            keyboard.row(btn)
        btn = InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_main"
        )
        keyboard.row(btn)
        photo = types.FSInputFile("bot/data/images/nearest_company.jpg")
        return await message.answer_photo(
            photo=photo,
            caption="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∞–º–∏ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏ üòî\n–ù–æ –≤–æ—Ç –¥–≤–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —Ñ–∏–ª–∏–∞–ª–∞ City Nails, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã!",
            reply_markup=keyboard.as_markup()
        )

    keyboard = InlineKeyboardBuilder()

    btn_1 = InlineKeyboardButton(
        text="–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É üì©",
        callback_data=f"chat_answer_to_{company['id']}"
    )
    keyboard.row(btn_1)

    async with session() as open_session:
        about_company = await open_session.execute(
            select(models.sql.AboutCompany).filter_by(company_id=int(company['id'])))
        about_company: models.sql.AboutCompany = about_company.scalars().first()

    if about_company:
        web_app_info = types.WebAppInfo(url=about_company.url)
        btn_2 = InlineKeyboardButton(
            text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ",
            web_app=web_app_info
        )
    else:
        web_app_info = types.WebAppInfo(url="https://citynails.studio/")
        btn_2 = InlineKeyboardButton(
            text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ",
            web_app=web_app_info
        )

    web_app_info = types.WebAppInfo(url=company["bookforms"][0]["url"])
    btn_3 = InlineKeyboardButton(
        text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
        web_app=web_app_info
    )
    keyboard.row(btn_2, btn_3)

    btn = InlineKeyboardButton(
        text="–í—ã—Ö–æ–¥",
        callback_data="back_to_main"
    )
    keyboard.row(btn)

    await message.answer_venue(
        title=company["title"],
        address=company["address"],
        latitude=company["coordinate_lat"],
        longitude=company["coordinate_lon"],
        reply_markup=keyboard.as_markup()
    )


def setup(dp: Dispatcher):
    dp.message.register(search_company_handler, F.text == "–ü–æ–∏—Å–∫ üîé")
    dp.message.register(get_data_handler, FindCompanyStates.get_data)
